function [val_z] = compute_z_measure(func_handle, val_temp, null_params, output_ind, opt_inputs, n_nodes,n_networks,n_factors,wi_flag, glb_flag)

%get parameters and configure analysis
has_tensor      = isfield(null_params, 'tensor');
has_iterations  = isfield(null_params, 'n_iter');

if ~has_iterations
    error('num_iterations is a mandatory field')
else
    n_iter = null_params.n_iter;
end

if has_tensor
    null_data = null_params.tensor;
    if size(null_data,5)<n_iter
        error('N iterations > Number of null adjacency matrices in tensor')
    end
end

%the 
if glb_flag
    stats_dim = 1; %nets always in first dim for globals measures
else
    %local measures are either nodes by nets by factors
    %or nodes by nets
    stats_dim = 2;
end

set(0,'DefaultTextInterpreter','none') %properly display progress bar
if has_tensor
    rand_inds = randperm(n_iter);
    null_val = zeros([size(val_temp),n_iter]);
    h = waitbar(0, ['Performing Randomizations for ',func2str(func_handle),'...']);
    for iter_ind = 1:n_iter
        null_graphs = null_data(:,:,:,:,rand_inds(iter_ind));
        if ndims(null_val) == 4 %local measures
            null_val(:,:,:,iter_ind) = compute_measure(func_handle, null_graphs, output_ind, opt_inputs, n_nodes, n_networks, n_factors, wi_flag);
        else %global measure
            null_val(:,:,iter_ind) = compute_measure(func_handle, null_graphs, output_ind, opt_inputs, n_nodes, n_networks, n_factors, wi_flag);
        end
        waitbar(iter_ind/n_iter,h)
    end
    close(h)
else
    %TODO: make matrix on the fly
end
set(0,'DefaultTextInterpreter','default') %reset interpreter
dist_mean = mean(null_val,stats_dim);
dist_dev = std(null_val,[],stats_dim);

numer = bsxfun(@minus,val_temp,dist_mean);
val_z = numer./dist_dev;